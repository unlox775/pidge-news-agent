#!/usr/bin/env node

const { NodeHtmlMarkdown } = require('node-html-markdown');
const nhm = new NodeHtmlMarkdown();

let inputData = '';
let limitWords;
let limitChars;
let verbose = false;

// Check for --verbose or -v argument
if (process.argv.indexOf('--verbose') !== -1
  || process.argv.indexOf('-v') !== -1
    ) {
    verbose = true;
}


// Check for --limit-words argument
const limitWordsIdx = process.argv.indexOf('--limit-words');
if (limitWordsIdx !== -1 && process.argv[limitWordsIdx + 1]) {
    limitWords = parseInt(process.argv[limitWordsIdx + 1], 10);
}

// Check for --limit-chars argument
const limitCharsIdx = process.argv.indexOf('--limit-chars');
if (limitCharsIdx !== -1 && process.argv[limitCharsIdx + 1]) {
    limitChars = parseInt(process.argv[limitCharsIdx + 1], 10);
}

process.stdin.on('data', chunk => {
  inputData += chunk;
});

process.stdin.on('end', () => {
  let markdown = nhm.translate(inputData);

  const originalChars = markdown.length;

  if (limitWords && !isNaN(limitWords)) {
    let wordsCounted = 0;
    let lastMatchIndex = 0;
    
    markdown.replace(/(\W+|\w+)/g, (match, _, index) => {
      if (/\w/.test(match)) {
        wordsCounted++;
      }

      if (wordsCounted === limitWords) {
        lastMatchIndex = index + match.length;
      }
    });

    if (wordsCounted > limitWords) {
      markdown = markdown.substring(0, lastMatchIndex);
    }
    // Print to stderr "Number of words: <number>"
    if (verbose) {
      process.stderr.write(`Number of words: ${wordsCounted}\n`);
    }
  }

  if (limitChars && !isNaN(limitChars)) {
    // Print to stderr "Number of chars: <number>"
    if (verbose) {
      process.stderr.write(`Number of chars: ${originalChars} (after word limit: ${markdown.length})\n`);
    }

    markdown = markdown.substring(0, limitChars);
  }

  process.stdout.write(markdown);
});
